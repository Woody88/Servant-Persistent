
==================== FINAL INTERFACE ====================
2017-12-13 05:43:39.520012 UTC

interface servant-persistent-0.1.0.0-F9U6X9AVPnS7puEgXNTfgZ:Configs 8002
  interface hash: 89ab40f2cf5855f4639abaa2370a19fb
  ABI hash: 334c35832835bd00f48f15cbeff86846
  export-list hash: 5ba548e39009e48b0da18ab7e93924f4
  orphan hash: 0b541bdf225a23738d3a512feee10e1d
  flag hash: 73e49978065ea61a006c0e9737b583d4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Configs.connStr
  Configs.envPool
  Configs.makePool
  Configs.setLogger
  Configs.App{Configs.App runApp}
  Configs.Config{Configs.Config getEnv getPool getPort}
  Configs.Environment{Configs.Development Configs.Production Configs.Test}
module dependencies:
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      attoparsec-iso8601-1.0.0.0@attoparsec-iso8601-1.0.0.0-CiauZZhskHA6jYy7CqE2mZ
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-LxClHUTiKUUAxWtvJ5Oeoy
                      blaze-html-0.9.0.1@blaze-html-0.9.0.1-GQ0yZtPYt2i2KdgnUEOA8p
                      blaze-markup-0.8.0.0@blaze-markup-0.8.0.0-GsxkVbRgODkgUQDmmDVob
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i
                      conduit-extra-1.1.17@conduit-extra-1.1.17-LHyPtC0nGlzDcgVxOcd4h4
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptonite-0.23@cryptonite-0.23-7aE9caGlGrwDnGcKBpfJ80
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      easy-file-0.2.1@easy-file-0.2.1-rguMBNaECxLikt4CCDx0D
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      fast-logger-2.4.10@fast-logger-2.4.10-7GMVhEi1femFXwSQxV5ynm
                      file-embed-0.0.10@file-embed-0.0.10-KWMmUDaNSRP7AxWSEHlrrK
                      filepath-1.4.1.1@filepath-1.4.1.1
                      foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      http-api-data-0.3.7.1@http-api-data-0.3.7.1-AT41KDpP9ayH63FPNXWrvF
                      http-date-0.0.6.1@http-date-0.0.6.1-AkYFHBFn90lGSerD29arC9
                      http-media-0.6.4@http-media-0.6.4-L2HKUvjwG4m4RLl78rlCa
                      http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      memory-0.14.9@memory-0.14.9-DuHWmOqOt5MKvG5MS8KASe
                      mime-types-0.1.0.7@mime-types-0.1.0.7-6b3z22GcDYZLEl2kkfCUAB
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      monad-logger-0.3.25.1@monad-logger-0.3.25.1-C5T06yv6lw54Umfdl3S8et
                      monad-loops-0.4.3@monad-loops-0.4.3-ERCN4ZKCeeS5SRhwqXsLBP
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      natural-transformation-0.4@natural-transformation-0.4-1wekIVD0YQa62debXjfFg3
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      network-uri-2.6.1.0@network-uri-2.6.1.0-7BN1tbB3iHQ2XgvmqLAYph
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      old-time-1.1.0.3@old-time-1.1.0.3-KWRsMSdY26c2L27Y9n9cyq
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      path-pieces-0.2.1@path-pieces-0.2.1-Ap205zdHJCr3aorBcPaHM5
                      persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q
                      persistent-postgresql-2.6.2@persistent-postgresql-2.6.2-5PPygiAaLRE7UEfD88u0V8
                      postgresql-libpq-0.9.3.1@postgresql-libpq-0.9.3.1-PNtzTLZ1kPBlp0W2VWiJp
                      postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-7wqiM7f7ESv7wSvmAjfLqt
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      resource-pool-0.2.3.2@resource-pool-0.2.3.2-GmoeVeJ8L5Y51jMJ5dPk3U
                      resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      servant-0.11@servant-0.11-5n0Jq59NGG63K7rfpU5Dxs
                      servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x
                      silently-1.2.5@silently-1.2.5-HsbqnAAyIOA8viZ4Sccs0a
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      stm-chans-3.0.0.4@stm-chans-3.0.0.4-JX6Y7GVvdkg3BduVhEnPWu
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-HK2T4drDKhqGigpJdBBdRG
                      stringsearch-0.3.6.6@stringsearch-0.3.6.6-2soGORichTR6reHVhDqKip
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uri-bytestring-0.2.3.3@uri-bytestring-0.2.3.3-Hc1wKsF7VwW2mAD17PrIxh
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vault-0.3.0.7@vault-0.3.0.7-FSJCPczyPWW8DwvwP76qt4
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      wai-3.2.1.1@wai-3.2.1.1-GYhAFGd1F2uKjCUZVPyC2C
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-7lzPCIcKJr41gr3SLmdLji
                      wai-extra-3.0.20.2@wai-extra-3.0.20.2-FZIfwBninleKHm4gfrfwwi
                      wai-logger-2.3.0@wai-logger-2.3.0-G2LMsBpHwLV49tDfVWxzX4
                      word8-0.1.3@word8-0.1.3-9o1uWQQ6KysJq8GGsVHHit
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-A7sWuFC2KLsFTBmLagoRSX:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE:Data.UnixTime.Diff
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.BoxedArray
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Monad
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.MutableBuilder
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Nat
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.NonEmpty
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Numerical.Subtractive
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ASCII7
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF16
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF32
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.AsciiString
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.OffsetSize
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UTF8.Base
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Conduit
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Pipe
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Bitmap
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Chunked.Unboxed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Buildable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Element
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Keyed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Mutable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Tuple
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.7.1@http-api-data-0.3.7.1-AT41KDpP9ayH63FPNXWrvF:Web.Internal.FormUrlEncoded
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         monad-logger-0.3.25.1@monad-logger-0.3.25.1-C5T06yv6lw54Umfdl3S8et:Control.Monad.Logger
                         network-uri-2.6.1.0@network-uri-2.6.1.0-7BN1tbB3iHQ2XgvmqLAYph:Network.URI
                         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Class.PersistConfig
                         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.6.2@persistent-postgresql-2.6.2-5PPygiAaLRE7UEfD88u0V8:Database.Persist.Postgresql
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi:Control.Monad.Trans.Resource.Internal
                         servant-0.11@servant-0.11-5n0Jq59NGG63K7rfpU5Dxs:Servant.API.ContentTypes
                         servant-0.11@servant-0.11-5n0Jq59NGG63K7rfpU5Dxs:Servant.API.IsSecure
                         servant-0.11@servant-0.11-5n0Jq59NGG63K7rfpU5Dxs:Servant.API.Verbs
                         servant-0.11@servant-0.11-5n0Jq59NGG63K7rfpU5Dxs:Servant.Utils.Links
                         servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal
                         servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal.BasicAuth
                         servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal.Handler
                         servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal.RoutingApplication
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uri-bytestring-0.2.3.3@uri-bytestring-0.2.3.3-Hc1wKsF7VwW2mAD17PrIxh:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:GHC.IO.Exception 5064be4c355632a1d1c4f2322f56ac52
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 64661030f691dd1495e363eeda7a5344
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 89cda42ec946d9d6577dd41ab95d523e
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  monad-logger-0.3.25.1@monad-logger-0.3.25.1-C5T06yv6lw54Umfdl3S8et:Control.Monad.Logger 16886ac8358a362ce7543433ade3f7e5
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Error.Class 635294424a2da8269902789f5c8bbe99
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Except 3bb0e2598193c1ba00c9723945e93004
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader 0a25f5000d6974b16ed96a739eacaeb6
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader.Class 9573b8d2ba4bcf8261d19527e0170c4d
import  -/  persistent-2.7.1@persistent-2.7.1-1WVuu59EOj3Jd0m1ZC6k7q:Database.Persist.Sql.Types dc41924da13724b9cfdfc3ffebe996cd
import  -/  persistent-postgresql-2.6.2@persistent-postgresql-2.6.2-5PPygiAaLRE7UEfD88u0V8:Database.Persist.Postgresql 7e6648ba2946ddc182502523c59c3a1a
import  -/  servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant 73596c6288a7d315a682d7006ae39fb2
import  -/  servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal.Handler 07eacaa7e3942dc5138efea15152acd6
import  -/  servant-server-0.11.0.1@servant-server-0.11.0.1-Dzlz1R4sOiMKQugTBmyK0x:Servant.Server.Internal.ServantErr 46f2938c833315653ccfc80a1e87b7fe
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe fb717b7ffb317f01e5849d6be7e862b4
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 1b607a084a390ae0e50e8f8dcbf2541a
import  -/  wai-3.2.1.1@wai-3.2.1.1-GYhAFGd1F2uKjCUZVPyC2C:Network.Wai 43c9d22c6cd2fa899c90fca75cdc02dd
import  -/  wai-extra-3.0.20.2@wai-extra-3.0.20.2-FZIfwBninleKHm4gfrfwwi:Network.Wai.Middleware.RequestLogger 94729dfb8db597c7f5a054125c7a0d6e
15546665de60f1b111f7b413eea4cd53
  $fApplicativeApp :: GHC.Base.Applicative Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.App
                  Configs.$fFunctorApp
                  Configs.$fApplicativeApp_$cpure
                  Configs.$fApplicativeApp_$c<*>
                  Configs.$fApplicativeApp_$c*>
                  Configs.$fApplicativeApp_$c<* -}
346ec9817263ffa3cbd74b917e7912ef
  $fApplicativeApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      Configs.Config Servant.Server.Internal.Handler.Handler a
    -> Control.Monad.Trans.Reader.ReaderT
         Configs.Config Servant.Server.Internal.Handler.Handler b
    -> Configs.Config
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             Configs.Config Servant.Server.Internal.Handler.Handler a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              Configs.Config Servant.Server.Internal.Handler.Handler b)
                   (eta2 :: Configs.Config) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ a
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Configs.Config>_R
                               <Servant.Server.Internal.Handler.Handler>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Servant.Server.Internal.Handler.N:Handler[0] <a>_N)
                              (Trans
                                   (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Servant.Server.Internal.ServantErr.ServantErr>_N
                                        <GHC.Types.IO>_R
                                        <a>_N)
                                   (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr a>_R)))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              x
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> a)
                              (\ (ds1 :: b) -> y) } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> a)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> a>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Configs.Config>_R
                         <Servant.Server.Internal.Handler.Handler>_R
                         <b>_N)
                      eta2)
                     `cast`
                   (Servant.Server.Internal.Handler.N:Handler[0] <b>_N)) -}
3547d18fffa3d5a64dcf85a0c1922157
  $fApplicativeApp2 ::
    Control.Monad.Trans.Reader.ReaderT
      Configs.Config Servant.Server.Internal.Handler.Handler a
    -> Control.Monad.Trans.Reader.ReaderT
         Configs.Config Servant.Server.Internal.Handler.Handler b
    -> Configs.Config
    -> Control.Monad.Trans.Except.ExceptT
         Servant.Server.Internal.ServantErr.ServantErr GHC.Types.IO b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             Configs.Config Servant.Server.Internal.Handler.Handler a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              Configs.Config Servant.Server.Internal.Handler.Handler b)
                   (eta2 :: Configs.Config) ->
                 Control.Monad.Trans.Except.$w$c<*>
                   @ GHC.Types.IO
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Configs.Config>_R
                               <Servant.Server.Internal.Handler.Handler>_R
                               <a>_N)
                            eta2)
                           `cast`
                         (Trans
                              (Servant.Server.Internal.Handler.N:Handler[0] <a>_N)
                              (Trans
                                   (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Servant.Server.Internal.ServantErr.ServantErr>_N
                                        <GHC.Types.IO>_R
                                        <a>_N)
                                   (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           Servant.Server.Internal.ServantErr.ServantErr a>_R)))
                           eta3 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Servant.Server.Internal.ServantErr.ServantErr
                              @ (b -> b)
                              x
                         Data.Either.Right y -> Configs.$fApplicativeApp3 @ b } #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Servant.Server.Internal.ServantErr.ServantErr (b -> b)>_R))
                        (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Servant.Server.Internal.ServantErr.ServantErr>_N
                                  <GHC.Types.IO>_R
                                  <b -> b>_N)))
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <Configs.Config>_R
                         <Servant.Server.Internal.Handler.Handler>_R
                         <b>_N)
                      eta2)
                     `cast`
                   (Servant.Server.Internal.Handler.N:Handler[0] <b>_N)) -}
eef5fe7732bbc5fd5207e6f98f4ea7ad
  $fApplicativeApp3 ::
    Data.Either.Either
      Servant.Server.Internal.ServantErr.ServantErr (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 Data.Either.Right
                   @ Servant.Server.Internal.ServantErr.ServantErr
                   @ (b -> b)
                   (Configs.$fApplicativeApp4 @ b)) -}
02471c9e1fa99f3fe9e9b11b38559a9b
  $fApplicativeApp4 :: b -> b
  {- Arity: 1, HasNoCafRefs, Unfolding: (\ @ b (eta :: b) -> eta) -}
551b4aedd3a549027a348ca4f646a39f
  $fApplicativeApp5 ::
    a
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: Configs.Config)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      eta #)) -}
15546665de60f1b111f7b413eea4cd53
  $fApplicativeApp_$c*> ::
    Configs.App a -> Configs.App b -> Configs.App b
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b -> Configs.$fApplicativeApp2 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Configs.N:App[0]) <a>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Configs.Config>_R
                                    (Servant.Server.Internal.Handler.N:Handler[0])
                                    <b>_N))
                          (Sym (Configs.N:App[0]) <b>_N)) -}
15546665de60f1b111f7b413eea4cd53
  $fApplicativeApp_$c<* ::
    Configs.App a -> Configs.App b -> Configs.App a
  {- Arity: 3, Strictness: <L,C(C1(U(U,1*U)))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b -> Configs.$fApplicativeApp1 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Configs.N:App[0]) <a>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Configs.Config>_R
                                    (Servant.Server.Internal.Handler.N:Handler[0])
                                    <a>_N))
                          (Sym (Configs.N:App[0]) <a>_N)) -}
15546665de60f1b111f7b413eea4cd53
  $fApplicativeApp_$c<*> ::
    Configs.App (a -> b) -> Configs.App a -> Configs.App b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (Configs.$fApplicativeApp_$s$fApplicativeReaderT_$c<*>
                   @ Configs.Config)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Configs.N:App[0]) <a -> b>_N
                 ->_R Sym (Configs.N:App[0]) <a>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N) -}
15546665de60f1b111f7b413eea4cd53
  $fApplicativeApp_$cpure :: a -> Configs.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fApplicativeApp5
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
233b2fa1147fb8c38a72a3936617dabf
  $fApplicativeApp_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r Servant.Server.Internal.Handler.Handler (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler a
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r Servant.Server.Internal.Handler.Handler (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r Servant.Server.Internal.Handler.Handler a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> Servant.Server.Internal.Handler.Handler b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r Servant.Server.Internal.Handler.Handler b)
                   (\ (tpl :: r -> Servant.Server.Internal.Handler.Handler b) -> tpl)
                     `cast`
                   (<r -> Servant.Server.Internal.Handler.Handler b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N))
                   (\ (r1 :: r) ->
                    Servant.Server.Internal.Handler.$fApplicativeHandler_$c<*>
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ a
                         v
                         r1))) -}
71c54ebb43167e104191bc92ed943e30
  $fEqEnvironment :: GHC.Classes.Eq Configs.Environment
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.Environment
                  Configs.$fEqEnvironment_$c==
                  Configs.$fEqEnvironment_$c/= -}
71c54ebb43167e104191bc92ed943e30
  $fEqEnvironment_$c/= ::
    Configs.Environment -> Configs.Environment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Configs.Environment) (b :: Configs.Environment) ->
                 case a of wild {
                   Configs.Development
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Configs.Development -> GHC.Types.False }
                   Configs.Test
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Configs.Test -> GHC.Types.False }
                   Configs.Production
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Configs.Production -> GHC.Types.False } }) -}
71c54ebb43167e104191bc92ed943e30
  $fEqEnvironment_$c== ::
    Configs.Environment -> Configs.Environment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Configs.Environment) (ds1 :: Configs.Environment) ->
                 case ds of wild {
                   Configs.Development
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Configs.Development -> GHC.Types.True }
                   Configs.Test
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Configs.Test -> GHC.Types.True }
                   Configs.Production
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Configs.Production -> GHC.Types.True } }) -}
15546665de60f1b111f7b413eea4cd53
  $fFunctorApp :: GHC.Base.Functor Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.App
                  Configs.$fFunctorApp_$cfmap
                  Configs.$fFunctorApp_$c<$ -}
d84a90fad54c7a35da10b8e580fcc5fe
  $fFunctorApp1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         Configs.Config Servant.Server.Internal.Handler.Handler b
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              Configs.Config Servant.Server.Internal.Handler.Handler b)
                   (eta2 :: Configs.Config)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Configs.Config>_R
                            <Servant.Server.Internal.Handler.Handler>_R
                            <b>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Servant.Server.Internal.Handler.N:Handler[0] <b>_N)
                           (Trans
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N)
                                (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        Servant.Server.Internal.ServantErr.ServantErr b>_R)))
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x
                      -> Data.Either.Left
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           x
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           eta } #) }) -}
15546665de60f1b111f7b413eea4cd53
  $fFunctorApp_$c<$ :: a -> Configs.App b -> Configs.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b -> Configs.$fFunctorApp1 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R Sym (Configs.N:App[0]) <b>_N
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fFunctorApp_$cfmap :: (a -> b) -> Configs.App a -> Configs.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Configs.$fFunctorApp_$s$fFunctorReaderT_$cfmap @ Configs.Config)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Configs.N:App[0]) <a>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N) -}
c19c2311f0acb5c9270d85a0a37bc276
  $fFunctorApp_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler a
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,1*U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             r Servant.Server.Internal.Handler.Handler a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> Servant.Server.Internal.Handler.Handler b)
                    @ (Control.Monad.Trans.Reader.ReaderT
                         r Servant.Server.Internal.Handler.Handler b)
                    (\ (tpl :: r -> Servant.Server.Internal.Handler.Handler b) -> tpl)
                      `cast`
                    (<r -> Servant.Server.Internal.Handler.Handler b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N))
                    (let {
                       g :: r -> Servant.Server.Internal.Handler.Handler a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ Servant.Server.Internal.Handler.Handler
                           @ a
                           eta
                     } in
                     (\ (x :: r)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (Servant.Server.Internal.Handler.$fFunctorHandler_$cfmap
                         @ a
                         @ b
                         f
                         (g x))
                        `cast`
                      (Trans
                           (Servant.Server.Internal.Handler.N:Handler[0] <b>_N)
                           (Trans
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <b>_N)
                                (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        Servant.Server.Internal.ServantErr.ServantErr b>_R)))
                        eta2)
                       `cast`
                     (<r>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr b>_R))
                               (Trans
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <b>_N))
                                    (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <b>_N)))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r Servant.Server.Internal.Handler.Handler a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N)) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadApp :: GHC.Base.Monad Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.App
                  Configs.$fApplicativeApp
                  Configs.$fMonadApp_$c>>=
                  Configs.$fMonadApp_$c>>
                  Configs.$fApplicativeApp_$cpure
                  Configs.$fMonadApp_$cfail -}
15546665de60f1b111f7b413eea4cd53
  $fMonadApp_$c>> :: Configs.App a -> Configs.App b -> Configs.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Configs.$fMonadApp_$s$fMonadReaderT_$c>> @ Configs.Config)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Configs.N:App[0]) <a>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N
                 ->_R Sym (Configs.N:App[0]) <b>_N) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadApp_$c>>= ::
    Configs.App a -> (a -> Configs.App b) -> Configs.App b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Configs.$fMonadApp_$s$fMonadReaderT_$c>>= @ Configs.Config)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Configs.N:App[0]) <a>_N
                 ->_R (<a>_R ->_R Sym (Configs.N:App[0]) <b>_N)
                 ->_R Sym (Configs.N:App[0]) <b>_N) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadApp_$cfail :: GHC.Base.String -> Configs.App a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Unfolding: InlineRule (0, True, True)
                (Configs.$fMonadApp_$s$fMonadReaderT_$cfail @ Configs.Config)
                  `cast`
                (forall (a :: <*>_N).
                 <[GHC.Types.Char]>_R ->_R Sym (Configs.N:App[0]) <a>_N) -}
07fb998fc1ec45d55d1ef25b26470439
  $fMonadApp_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r Servant.Server.Internal.Handler.Handler a
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler b
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r Servant.Server.Internal.Handler.Handler a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r Servant.Server.Internal.Handler.Handler b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> Servant.Server.Internal.Handler.Handler b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r Servant.Server.Internal.Handler.Handler b)
                   (\ (tpl :: r -> Servant.Server.Internal.Handler.Handler b) -> tpl)
                     `cast`
                   (<r -> Servant.Server.Internal.Handler.Handler b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N))
                   (\ (r1 :: r) ->
                    Servant.Server.Internal.Handler.$fMonadHandler_$c>>=
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ b
                         k
                         r1))) -}
7c03f522a76576ea5ff6acaa3ef2f088
  $fMonadApp_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r Servant.Server.Internal.Handler.Handler a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r Servant.Server.Internal.Handler.Handler b)
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r Servant.Server.Internal.Handler.Handler a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r Servant.Server.Internal.Handler.Handler b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> Servant.Server.Internal.Handler.Handler b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r Servant.Server.Internal.Handler.Handler b)
                   (\ (tpl :: r -> Servant.Server.Internal.Handler.Handler b) -> tpl)
                     `cast`
                   (<r -> Servant.Server.Internal.Handler.Handler b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <b>_N))
                   (\ (r1 :: r) ->
                    Servant.Server.Internal.Handler.$fMonadHandler_$c>>=
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ Servant.Server.Internal.Handler.Handler
                         @ b
                         (k a1)
                         r1))) -}
264ceadf0d77dbfe98ca8b508e7948b3
  $fMonadApp_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r Servant.Server.Internal.Handler.Handler a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: Servant.Server.Internal.Handler.Handler a
                   = Servant.Server.Internal.Handler.$fMonadHandler_$cfail @ a msg
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Servant.Server.Internal.Handler.Handler a)
                    @ r
                    eta
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <Servant.Server.Internal.Handler.Handler>_R <a>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadErrorApp ::
    Control.Monad.Error.Class.MonadError
      Servant.Server.Internal.ServantErr.ServantErr Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Servant.Server.Internal.ServantErr.ServantErr
                  @ Configs.App
                  Configs.$fMonadApp
                  Configs.$fMonadErrorApp_$cthrowError
                  Configs.$fMonadErrorApp_$ccatchError -}
e637937e6d0121df3b067041c1839b9e
  $fMonadErrorApp1 ::
    Control.Monad.Trans.Reader.ReaderT
      Configs.Config Servant.Server.Internal.Handler.Handler a
    -> (Servant.Server.Internal.ServantErr.ServantErr
        -> Control.Monad.Trans.Reader.ReaderT
             Configs.Config Servant.Server.Internal.Handler.Handler a)
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             Configs.Config Servant.Server.Internal.Handler.Handler a)
                   (eta1 :: Servant.Server.Internal.ServantErr.ServantErr
                            -> Control.Monad.Trans.Reader.ReaderT
                                 Configs.Config Servant.Server.Internal.Handler.Handler a)
                   (eta2 :: Configs.Config)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Configs.Config>_R
                            <Servant.Server.Internal.Handler.Handler>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Servant.Server.Internal.Handler.N:Handler[0] <a>_N)
                           (Trans
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <a>_N)
                                (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        Servant.Server.Internal.ServantErr.ServantErr a>_R)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> ((eta1 l)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Configs.Config>_R
                            <Servant.Server.Internal.Handler.Handler>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Servant.Server.Internal.Handler.N:Handler[0] <a>_N)
                           (Trans
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Servant.Server.Internal.ServantErr.ServantErr>_N
                                     <GHC.Types.IO>_R
                                     <a>_N)
                                (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        Servant.Server.Internal.ServantErr.ServantErr a>_R)))
                        ipv
                   Data.Either.Right r
                   -> (# ipv,
                         Data.Either.Right
                           @ Servant.Server.Internal.ServantErr.ServantErr
                           @ a
                           r #) } }) -}
c662904f37bbd65d290af81e1277b4fe
  $fMonadErrorApp2 ::
    Servant.Server.Internal.ServantErr.ServantErr
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (eta :: Servant.Server.Internal.ServantErr.ServantErr)
                   (eta1 :: Configs.Config)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Servant.Server.Internal.Handler.$fMonadErrorHandler2
                   @ a
                   eta
                   eta2) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadErrorApp_$ccatchError ::
    Configs.App a
    -> (Servant.Server.Internal.ServantErr.ServantErr -> Configs.App a)
    -> Configs.App a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SS))),1*C1(C1(U(U,1*U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fMonadErrorApp1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Configs.N:App[0]) <a>_N
                 ->_R (<Servant.Server.Internal.ServantErr.ServantErr>_R
                       ->_R Sym (Configs.N:App[0]) <a>_N)
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadErrorApp_$cthrowError ::
    Servant.Server.Internal.ServantErr.ServantErr -> Configs.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fMonadErrorApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Servant.Server.Internal.ServantErr.ServantErr>_R
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadIOApp :: Control.Monad.IO.Class.MonadIO Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.App Configs.$fMonadApp Configs.$fMonadIOApp_$cliftIO -}
7bbc552bd0b6b6a0f937c4ec68e14178
  $fMonadIOApp1 ::
    GHC.Types.IO a
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (eta :: GHC.Types.IO a)
                   (eta1 :: Configs.Config)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Servant.Server.Internal.Handler.$fMonadBaseIOHandler1
                   @ a
                   eta
                   eta2) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadIOApp_$cliftIO :: GHC.Types.IO a -> Configs.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fMonadIOApp1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadReaderApp ::
    Control.Monad.Reader.Class.MonadReader Configs.Config Configs.App
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.Config
                  @ Configs.App
                  Configs.$fMonadApp
                  Configs.$fMonadReaderApp_$cask
                  Configs.$fMonadReaderApp_$clocal
                  Configs.$fMonadReaderApp_$creader -}
63255ddec85ec3fc359a2935064a8f56
  $fMonadReaderApp1 ::
    (Configs.Config -> a)
    -> Configs.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Servant.Server.Internal.ServantErr.ServantErr a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Configs.Config -> a)
                   (eta1 :: Configs.Config)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Data.Either.Right
                      @ Servant.Server.Internal.ServantErr.ServantErr
                      @ a
                      (eta eta1) #)) -}
872a45d47f7b7139556c286fa032cc82
  $fMonadReaderApp2 ::
    (Configs.Config -> Configs.Config)
    -> Control.Monad.Trans.Reader.ReaderT
         Configs.Config Servant.Server.Internal.Handler.Handler a
    -> Configs.Config
    -> Servant.Server.Internal.Handler.Handler a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Configs.Config -> Configs.Config)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              Configs.Config Servant.Server.Internal.Handler.Handler a)
                   (eta2 :: Configs.Config) ->
                 eta1
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <Configs.Config>_R
                      <Servant.Server.Internal.Handler.Handler>_R
                      <a>_N)
                   (eta eta2)) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadReaderApp_$cask :: Configs.App Configs.Config
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Servant.Server.Internal.Handler.$fMonadHandler1 @ Configs.Config)
                  `cast`
                (Trans
                     (<Configs.Config>_R
                      ->_R Trans
                               (Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            Configs.Config>_R))
                               (Trans
                                    (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                              <Servant.Server.Internal.ServantErr.ServantErr>_N
                                              <GHC.Types.IO>_R
                                              <Configs.Config>_N))
                                    (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <Configs.Config>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Configs.Config>_R
                                    <Servant.Server.Internal.Handler.Handler>_R
                                    <Configs.Config>_N))
                          (Sym (Configs.N:App[0]) <Configs.Config>_N))) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadReaderApp_$clocal ::
    (Configs.Config -> Configs.Config)
    -> Configs.App a -> Configs.App a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fMonadReaderApp2
                  `cast`
                (forall (a :: <*>_N).
                 <Configs.Config -> Configs.Config>_R
                 ->_R Sym (Configs.N:App[0]) <a>_N
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Configs.Config>_R
                                    <Servant.Server.Internal.Handler.Handler>_R
                                    <a>_N))
                          (Sym (Configs.N:App[0]) <a>_N)) -}
15546665de60f1b111f7b413eea4cd53
  $fMonadReaderApp_$creader :: (Configs.Config -> a) -> Configs.App a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fMonadReaderApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Configs.Config -> a>_R
                 ->_R Trans
                          (<Configs.Config>_R
                           ->_R Trans
                                    (Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                 a>_R))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                   <Servant.Server.Internal.ServantErr.ServantErr>_N
                                                   <GHC.Types.IO>_R
                                                   <a>_N))
                                         (Sym (Servant.Server.Internal.Handler.N:Handler[0]) <a>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Configs.Config>_R
                                         <Servant.Server.Internal.Handler.Handler>_R
                                         <a>_N))
                               (Sym (Configs.N:App[0]) <a>_N))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment :: GHC.Read.Read Configs.Environment
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.Environment
                  Configs.$fReadEnvironment_$creadsPrec
                  Configs.$fReadEnvironment_$creadList
                  Configs.$fReadEnvironment_$creadPrec
                  Configs.$fReadEnvironment_$creadListPrec -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Configs.Environment] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Configs.Environment]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Configs.Environment
                   Configs.$fReadEnvironment2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Configs.Environment>_R))
                   eta
                   @ b
                   eta1) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
  {- Strictness: m,
     Unfolding: ((Configs.$fReadEnvironment12,
                  Configs.$fReadEnvironment11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Configs.Environment>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Configs.Environment>_R))))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Configs.Environment -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Configs.Environment -> Text.ParserCombinators.ReadP.P b) ->
                 eta Configs.Test) -}
f32cb82a702b67460f5738f6a84dc8ed
  $fReadEnvironment12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Test"#) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
  {- Strictness: m,
     Unfolding: ((Configs.$fReadEnvironment15,
                  Configs.$fReadEnvironment14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Configs.Environment>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Configs.Environment>_R))))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Configs.Environment -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Configs.Environment -> Text.ParserCombinators.ReadP.P b) ->
                 eta Configs.Development) -}
0e63f70d053d10f8ddd445606991016c
  $fReadEnvironment15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Development"#) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment16 ::
    Text.ParserCombinators.ReadP.P [Configs.Environment]
  {- Unfolding: (GHC.Read.list1
                   @ Configs.Environment
                   Configs.$fReadEnvironment2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Configs.Environment>_R))
                   GHC.Read.$fRead()5
                   @ [Configs.Environment]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Configs.Environment])) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Configs.Environment
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Configs.Environment
                   Configs.$fReadEnvironment3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Configs.Environment>_R))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Configs.Environment
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ Configs.Environment
                   Configs.$fReadEnvironment4
                   eta) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
                   Configs.$fReadEnvironment13
                   Configs.$fReadEnvironment5) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
                   Configs.$fReadEnvironment10
                   Configs.$fReadEnvironment6) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
                   Configs.$fReadEnvironment7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment)
  {- Strictness: m,
     Unfolding: ((Configs.$fReadEnvironment9,
                  Configs.$fReadEnvironment8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Configs.Environment>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Configs.Environment>_R))))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Configs.Environment -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Configs.Environment -> Text.ParserCombinators.ReadP.P b) ->
                 eta Configs.Production) -}
c59f87492800e64ccef4ab95899e082c
  $fReadEnvironment9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Production"#) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Configs.Environment]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Configs.Environment]
                   Configs.$fReadEnvironment16) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Configs.Environment]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.$fReadEnvironment1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Configs.Environment]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Configs.Environment]>_R))) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Configs.Environment
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Configs.$fReadEnvironment2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Configs.Environment>_R)) -}
71c54ebb43167e104191bc92ed943e30
  $fReadEnvironment_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Configs.Environment
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Configs.Environment
                   ((GHC.Read.parens1
                       @ Configs.Environment
                       Configs.$fReadEnvironment3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Configs.Environment>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Configs.Environment>_R)
                      @ Configs.Environment
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Configs.Environment))) -}
71c54ebb43167e104191bc92ed943e30
  $fShowEnvironment :: GHC.Show.Show Configs.Environment
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Configs.Environment
                  Configs.$fShowEnvironment_$cshowsPrec
                  Configs.$fShowEnvironment_$cshow
                  Configs.$fShowEnvironment_$cshowList -}
71c54ebb43167e104191bc92ed943e30
  $fShowEnvironment_$cshow :: Configs.Environment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Configs.Environment) ->
                 case x of wild {
                   Configs.Development -> Configs.$fReadEnvironment15
                   Configs.Test -> Configs.$fReadEnvironment12
                   Configs.Production -> Configs.$fReadEnvironment9 }) -}
71c54ebb43167e104191bc92ed943e30
  $fShowEnvironment_$cshowList ::
    [Configs.Environment] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Configs.Environment
                   Configs.$w$cshowsPrec) -}
71c54ebb43167e104191bc92ed943e30
  $fShowEnvironment_$cshowsPrec ::
    GHC.Types.Int -> Configs.Environment -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Configs.Environment)
                   (w2 :: GHC.Base.String) ->
                 Configs.$w$cshowsPrec w1 w2) -}
c4a235372f368dafc1245e8c0accf9a0
  $s$fApplicativeMaybeT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Configs.$s$fApplicativeMaybeT1
                  (\ @ a
                     (eta :: a)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.$fFunctorIO_$cfmap
                      @ a
                      @ (GHC.Base.Maybe a)
                      (GHC.Base.Just @ a)
                      (GHC.Base.returnIO @ a eta))
                     `cast`
                   (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)
                     eta1)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Trans
                            (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R))
                            (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                      <GHC.Types.IO>_R <a>_N)))
                  Configs.$s$fApplicativeMaybeT_$s$fApplicativeMaybeT_$c<*>
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c*>
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dFunctor
                     Configs.$s$fApplicativeMaybeT_$dMonad)
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c<*
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dFunctor
                     Configs.$s$fApplicativeMaybeT_$dMonad) -}
725574619e67f4fd7841420bec9e10d8
  $s$fApplicativeMaybeT1 ::
    GHC.Base.Functor (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Unfolding: (Control.Monad.Trans.Maybe.$fFunctorMaybeT
                   @ GHC.Types.IO
                   GHC.Base.$fFunctorIO) -}
52bde968d8889daeffde9a11c529be37
  $s$fApplicativeMaybeT_$dFunctor :: GHC.Base.Functor GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fFunctorIO -}
5f833a3c788f9cf996a9fffc0ea25f23
  $s$fApplicativeMaybeT_$dMonad :: GHC.Base.Monad GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fMonadIO -}
a9c5dcae3f9e06d780b5179ef633c85c
  $s$fApplicativeMaybeT_$s$fApplicativeMaybeT_$c<*> ::
    Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (mf :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO (a -> b))
                   (mx :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (GHC.Base.Maybe b))
                   @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b)
                   (\ (tpl :: GHC.Types.IO (GHC.Base.Maybe b)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (GHC.Base.Maybe b)>_R
                    ->_R Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                  <GHC.Types.IO>_R <b>_N))
                   (GHC.Base.bindIO
                      @ (GHC.Base.Maybe (a -> b))
                      @ (GHC.Base.Maybe b)
                      (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ (a -> b) mf)
                      (\ (mb_f :: GHC.Base.Maybe (a -> b))
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case mb_f of wild {
                         GHC.Base.Nothing
                         -> (GHC.Base.returnIO @ (GHC.Base.Maybe b) (GHC.Base.Nothing @ b))
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta
                         GHC.Base.Just f
                         -> (GHC.Base.bindIO
                               @ (GHC.Base.Maybe a)
                               @ (GHC.Base.Maybe b)
                               (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ a mx)
                               (\ (mb_x :: GHC.Base.Maybe a)
                                  (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                case mb_x of wild1 {
                                  GHC.Base.Nothing
                                  -> (GHC.Base.returnIO @ (GHC.Base.Maybe b) (GHC.Base.Nothing @ b))
                                       `cast`
                                     (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                                       eta1
                                  GHC.Base.Just x
                                  -> (GHC.Base.returnIO
                                        @ (GHC.Base.Maybe b)
                                        (GHC.Base.Just @ b (f x)))
                                       `cast`
                                     (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                                       eta1 })
                                 `cast`
                               (<GHC.Base.Maybe a>_R
                                ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)))
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta })
                        `cast`
                      (<GHC.Base.Maybe (a -> b)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)))) -}
86382668938e5ac20738f464fd453e9e
  $s$fApplicativeNoLoggingT ::
    GHC.Base.Applicative (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Configs.$s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative
                  GHC.Base.returnIO
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                 <GHC.Types.IO>_R) <a>_N)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeNoLoggingT_$dApplicative)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeNoLoggingT_$dApplicative)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeNoLoggingT_$dApplicative) -}
8a9228d23b059c2ad80d662b5b675288
  $s$fApplicativeNoLoggingT1 ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Configs.$s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative1
                  (\ @ a
                     (eta :: a)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.$fFunctorIO_$cfmap
                      @ a
                      @ (GHC.Base.Maybe a)
                      (GHC.Base.Just @ a)
                      (GHC.Base.returnIO @ a eta))
                     `cast`
                   (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)
                     eta1)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Trans
                            (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                           <GHC.Types.IO>_R <a>_N))
                                 (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                           <Control.Monad.Trans.Maybe.MaybeT
                                              GHC.Types.IO>_R) <a>_N)))
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad) -}
ee66493a2f482516c3e8f36f9be00a06
  $s$fApplicativeNoLoggingT_$dApplicative ::
    GHC.Base.Applicative GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fApplicativeIO -}
2b9b4b00bb633ee13f897d8f004a9e65
  $s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative ::
    GHC.Base.Functor (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT -}
b0425ba9a7a5b3a0c62981eeafb0b0a0
  $s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative1 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1 -}
fc5a07a141369c1b9d6d46923fd67eee
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT ::
    GHC.Base.Functor (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap
                  Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$ -}
4b585aeaeacf72ecd51c2b60fd78217e
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap1
                  Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$1 -}
3e90bbaad0cdc6c8a361138f442b4052
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$ ::
    a
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO b
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Logger.NoLoggingT GHC.Types.IO b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.$fFunctorIO_$cfmap
                    @ b
                    @ a
                    (\ (ds :: b) -> eta)
                    eta1
                      `cast`
                    (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <b>_N))
                   `cast`
                 (GHC.Types.N:IO[0] <a>_R)
                   eta2)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Logger.NoLoggingT GHC.Types.IO b>_R
                 ->_R Trans
                          (Sym (GHC.Types.N:IO[0] <a>_R))
                          (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                    <GHC.Types.IO>_R) <a>_N)) -}
5af78578b3583a2923cd216f567e40d7
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$1 ::
    a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Logger.NoLoggingT
                              (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.$fFunctorIO_$cfmap
                    @ (GHC.Base.Maybe b)
                    @ (GHC.Base.Maybe a)
                    (GHC.Base.$fApplicativeMaybe_$sliftM @ b @ a (\ (ds :: b) -> eta))
                    (Control.Monad.Trans.Maybe.runMaybeT
                       @ GHC.Types.IO
                       @ b
                       eta1
                         `cast`
                       (Control.Monad.Logger.N:NoLoggingT[0]
                            <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R <b>_N)))
                   `cast`
                 (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)
                   eta2)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Logger.NoLoggingT
                         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b>_R
                 ->_R Trans
                          (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                         <GHC.Types.IO>_R <a>_N))
                               (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                         <Control.Monad.Trans.Maybe.MaybeT
                                            GHC.Types.IO>_R) <a>_N))) -}
b47e5f527dce569338da4ce6e4f27546
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap ::
    (a -> b)
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO a
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (x :: Control.Monad.Logger.NoLoggingT GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.$fFunctorIO_$cfmap
                    @ a
                    @ b
                    f
                    (Control.Monad.Logger.runNoLoggingT @ GHC.Types.IO @ a x))
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   eta)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Logger.NoLoggingT GHC.Types.IO a>_R
                 ->_R Trans
                          (Sym (GHC.Types.N:IO[0] <b>_R))
                          (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                    <GHC.Types.IO>_R) <b>_N)) -}
fa109af02c0e60f6ee11179c7a820023
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap1 ::
    (a -> b)
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.$fFunctorIO_$cfmap
                    @ (GHC.Base.Maybe a)
                    @ (GHC.Base.Maybe b)
                    (GHC.Base.$fApplicativeMaybe_$sliftM @ a @ b f)
                    (Control.Monad.Trans.Maybe.runMaybeT
                       @ GHC.Types.IO
                       @ a
                       (Control.Monad.Logger.runNoLoggingT
                          @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                          @ a
                          eta)))
                   `cast`
                 (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                   eta1)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Logger.NoLoggingT
                         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a>_R
                 ->_R Trans
                          (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                         <GHC.Types.IO>_R <b>_N))
                               (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                         <Control.Monad.Trans.Maybe.MaybeT
                                            GHC.Types.IO>_R) <b>_N))) -}
571d3479d800c0a92dc1c74afaa26e3d
  $s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fApplicativeMaybeT -}
3943f6268c717d9c2edca933a83f1155
  $s$fMonadBaseControlbMaybeT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Configs.$s$fMonadBaseControlbMaybeT_$dMonadBase
                  Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadBaseControlbMaybeT_$cliftBaseWith
                  (Control.Monad.Trans.Control.$fMonadBaseControlbMaybeT_$crestoreM
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
7ed13e46be60dfc3b8d2c5a9e73f98b2
  $s$fMonadBaseControlbMaybeT1 ::
    GHC.Base.Monad (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT -}
38d4c03bedac51f75e33abdf8de9ef22
  $s$fMonadBaseControlbMaybeT_$dMonadBase ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadBasebMaybeT -}
156af21b387c15e345e4372a5def01d6
  $s$fMonadBaseControlbMaybeT_$dMonadBase1 ::
    Control.Monad.Base.MonadBase GHC.Types.IO GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Control.Monad.Base.$fMonadBaseIOIO -}
2a09e97a730d129a8a6a8f15b38e038c
  $s$fMonadBaseControlbMaybeT_$s$fMonadBaseControlbMaybeT_$cliftBaseWith ::
    (Control.Monad.Trans.Control.RunInBase
       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) GHC.Types.IO
     -> GHC.Types.IO a)
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a
  {- Arity: 1, Strictness: <L,1*C1(U)>,
     Unfolding: (\ @ a
                   (ds :: Control.Monad.Trans.Control.RunInBase
                            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) GHC.Types.IO
                          -> GHC.Types.IO a) ->
                 Control.Monad.Trans.Control.$fMonadTransControlMaybeT_$cliftWith
                   @ GHC.Types.IO
                   @ a
                   GHC.Base.$fMonadIO
                   (\ (run :: Control.Monad.Trans.Control.Run
                                Control.Monad.Trans.Maybe.MaybeT)[OneShot] ->
                    let {
                      poly_g :: forall a1.
                                Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a1
                                -> GHC.Types.IO
                                     (Control.Monad.Trans.Control.StT
                                        Control.Monad.Trans.Maybe.MaybeT a1)
                      = \ @ a1 -> run @ GHC.Types.IO @ a1 GHC.Base.$fMonadIO
                    } in
                    ds
                      (\ @ a1 (x :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a1) ->
                       poly_g @ a1 x)
                        `cast`
                      (forall (a1 :: <*>_N).
                       <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a1>_R
                       ->_R (GHC.Types.IO
                               (Trans
                                    (Sub (Sym (Control.Monad.Trans.Control.D:R:StMIOa[0]
                                                   <Control.Monad.Trans.Control.StT
                                                      Control.Monad.Trans.Maybe.MaybeT a1>_N)))
                                    (Sub (Sym (Control.Monad.Trans.Control.D:R:StMMaybeTa[0]
                                                   <a1>_N <GHC.Types.IO>_N)))))_R))) -}
84b4293a3cdf6b8d2ba2d11f12f8db3f
  $s$fMonadBaseControlbMaybeT_$s$fMonadBasebMaybeT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  (Control.Monad.Base.$fMonadBasebMaybeT_$cp2MonadBase
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Configs.$s$fMonadBaseControlbMaybeT_$dMonadBase1)
                  GHC.Base.$fMonadIO
                  Configs.$s$fMonadBaseControlbMaybeT1
                  (Control.Monad.Base.$fMonadBasebMaybeT_$cliftBase
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Configs.$s$fMonadBaseControlbMaybeT_$dMonadBase1) -}
2e6e7a9781c88f0b4a69a9a0c3fe8f42
  $s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT ::
    GHC.Base.Monad (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Configs.$s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad
                  Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>>=
                  Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>>
                  (Control.Monad.Trans.Maybe.$fMonadMaybeT_$creturn
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dMonad)
                  (Control.Monad.Trans.Maybe.$fMonadFailMaybeT_$cfail
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dMonad) -}
d9f8337441b17c7d4030e84c1b04e3e2
  $s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>> ::
    Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (GHC.Base.Maybe b))
                   @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b)
                   (\ (tpl :: GHC.Types.IO (GHC.Base.Maybe b)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (GHC.Base.Maybe b)>_R
                    ->_R Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                  <GHC.Types.IO>_R <b>_N))
                   (GHC.Base.bindIO
                      @ (GHC.Base.Maybe a)
                      @ (GHC.Base.Maybe b)
                      (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ a m1)
                      (\ (v :: GHC.Base.Maybe a)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case v of wild {
                         GHC.Base.Nothing
                         -> (GHC.Base.returnIO @ (GHC.Base.Maybe b) (GHC.Base.Nothing @ b))
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta
                         GHC.Base.Just y
                         -> (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ b k)
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta })
                        `cast`
                      (<GHC.Base.Maybe a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)))) -}
772b26622609f07ee8109d9e12b9834f
  $s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>>= ::
    Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b)
    -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (x :: Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO a)
                   (f :: a -> Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (GHC.Base.Maybe b))
                   @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO b)
                   (\ (tpl :: GHC.Types.IO (GHC.Base.Maybe b)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (GHC.Base.Maybe b)>_R
                    ->_R Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                  <GHC.Types.IO>_R <b>_N))
                   (GHC.Base.bindIO
                      @ (GHC.Base.Maybe a)
                      @ (GHC.Base.Maybe b)
                      (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ a x)
                      (\ (v :: GHC.Base.Maybe a)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case v of wild {
                         GHC.Base.Nothing
                         -> (GHC.Base.returnIO @ (GHC.Base.Maybe b) (GHC.Base.Nothing @ b))
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta
                         GHC.Base.Just y
                         -> (Control.Monad.Trans.Maybe.runMaybeT @ GHC.Types.IO @ b (f y))
                              `cast`
                            (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)
                              eta })
                        `cast`
                      (<GHC.Base.Maybe a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe b>_R)))) -}
a4434651b4c56177acde3afd83c419a3
  $s$fMonadBaseControlbNoLoggingT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl
                  (Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO)
                  (Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$crestoreM
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
7a3b01eed70b2ffea073ff083d5e0e45
  $s$fMonadBaseControlbNoLoggingT1 ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl1
                  (Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$cliftBaseWith
                     @ GHC.Types.IO
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbNoLoggingT2)
                  (Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$crestoreM
                     @ GHC.Types.IO
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbNoLoggingT2) -}
3eb6f2ac1bd4ed462a61128b393c116e
  $s$fMonadBaseControlbNoLoggingT2 ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbMaybeT -}
3123e86dbc0665e21e4a725802c0f89c
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT -}
852a2fe768d2ae470acd34eea0bf8b91
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl1 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT1 -}
ee9fdd29f7b9300a0cfd98ac6f82c751
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cp1Monad
                  GHC.Base.$fMonadIO
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadIONoLoggingT_$cp1MonadIO
                  (Control.Monad.Logger.$fMonadBasebNoLoggingT_$cliftBase
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Configs.$s$fMonadBaseControlbMaybeT_$dMonadBase1) -}
5f7d62653b9859076276106f10004805
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT1 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  GHC.Base.$fApplicativeIO
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp2MonadBase
                  GHC.Base.$fMonadIO
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp4MonadBase
                  (Control.Monad.Logger.$fMonadBasebNoLoggingT_$cliftBase
                     @ GHC.Types.IO
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbMaybeT_$dMonadBase) -}
931006cf840b675e60c56512a07b916a
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp2MonadBase ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fApplicativeNoLoggingT1 -}
d4214ee90493a87636a59984318618ff
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp4MonadBase ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT1 -}
d050b3681690563deed165c1e3a8d6c7
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadIONoLoggingT_$cp1MonadIO ::
    GHC.Base.Monad (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT -}
300bc770b973d3f3e71f754b9463490a
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT ::
    GHC.Base.Monad (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cp1Monad
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dMonad)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>>
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ GHC.Types.IO
                     Configs.$s$fApplicativeMaybeT_$dMonad)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail -}
25ad478dc6cbb035d843478880401b5b
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT1 ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp2MonadBase
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbMaybeT1)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>>1
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbMaybeT1)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail1 -}
1a020f31a28d5c796764dacb69f9a4e1
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>> ::
    Control.Monad.Logger.NoLoggingT GHC.Types.IO a
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO b
    -> Control.Monad.Logger.NoLoggingT GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Logger.NoLoggingT GHC.Types.IO a)
                   (k :: Control.Monad.Logger.NoLoggingT GHC.Types.IO b) ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ GHC.Types.IO
                   Configs.$s$fApplicativeMaybeT_$dMonad
                   @ a
                   @ b
                   m1
                   (\ (ds :: a) -> k)) -}
ed5ea2a858efffff63cdff9598e14c1f
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>>1 ::
    Control.Monad.Logger.NoLoggingT
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Logger.NoLoggingT
                            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a)
                   (k :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) b) ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                   Configs.$s$fMonadBaseControlbMaybeT1
                   @ a
                   @ b
                   m1
                   (\ (ds :: a) -> k)) -}
abc1d40f197a7a0bd698cd3cef4f46cb
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail ::
    GHC.Base.String -> Control.Monad.Logger.NoLoggingT GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: GHC.Base.String) ->
                 Control.Monad.Logger.$fMonadNoLoggingT1
                   @ GHC.Types.IO
                   @ a
                   Configs.$s$fApplicativeMaybeT_$dMonad
                   eta) -}
ad5b93f6747e6e7babad3b9d3021b96b
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail1 ::
    GHC.Base.String
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: GHC.Base.String) ->
                 Control.Monad.Logger.$fMonadNoLoggingT1
                   @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                   @ a
                   Configs.$s$fMonadBaseControlbMaybeT1
                   eta) -}
9431a6382945b8129626bdaeb4720039
  $s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cp1Monad ::
    GHC.Base.Applicative (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Configs.$s$fApplicativeNoLoggingT -}
d575d3642107ae16e711fbaa20a85414
  $s$fMonadLoggerNoLoggingT ::
    Control.Monad.Logger.MonadLogger
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT1
                  (Control.Monad.Logger.$fMonadLoggerNoLoggingT_$cmonadLoggerLog
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Configs.$s$fMonadBaseControlbMaybeT1) -}
d9eddc4b8e55fbf28c66729c22a56150
  $s$fMonadLoggerNoLoggingT1 ::
    Control.Monad.Logger.MonadLogger
      (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                  Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT
                  (Control.Monad.Logger.$fMonadLoggerNoLoggingT_$cmonadLoggerLog
                     @ GHC.Types.IO
                     GHC.Base.$fMonadIO) -}
8f7f5532365e4be29cf5cb071a844ce2
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16593300741536626375##
                   7180088219036736386##
                   Configs.$trModule
                   Configs.$tc'App1) -}
e5c22be68777caa232de891dc8f5d65e
  $tc'App1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'App"#) -}
3ca160d27d2d28970cf071af2a90844d
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5080430764460129039##
                   16373320143053827681##
                   Configs.$trModule
                   Configs.$tc'Config1) -}
c935fa2a0a48c6910edf6e2c9b3e5c5e
  $tc'Config1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Config"#) -}
3a44ec0d1a45d4cfed3bb4c0ff750bf3
  $tc'Development :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3793298196694790994##
                   1702847634349279316##
                   Configs.$trModule
                   Configs.$tc'Development1) -}
8e740708588839e2b466c6fb692a2713
  $tc'Development1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Development"#) -}
60c876f6630063f267c714832db07674
  $tc'Production :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1215748812174868605##
                   1983822866938762104##
                   Configs.$trModule
                   Configs.$tc'Production1) -}
863c15ccdb23ba9bf07e4e9d244cbf4c
  $tc'Production1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Production"#) -}
4b6ead8e2259169da0cd44e3624aaa42
  $tc'Test :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9107777992644598113##
                   9470870314846902162##
                   Configs.$trModule
                   Configs.$tc'Test1) -}
0914d48bdcd36e1c8429db783f8f7972
  $tc'Test1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Test"#) -}
ec22e7b6dbb204f36055c25ef7124140
  $tcApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14539202687218853647##
                   14045222606290381731##
                   Configs.$trModule
                   Configs.$tcApp1) -}
64aefa132bdb0443a412e09d8c083175
  $tcApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "App"#) -}
bdc82539fbaceb18984e63100611d042
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1106560181560550076##
                   4588502275501271160##
                   Configs.$trModule
                   Configs.$tcConfig1) -}
af2f0fabb54047005f0365ea98fa6832
  $tcConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Config"#) -}
7f45d41d7cabd4a61158ecd0d30f07df
  $tcEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5531259473922112997##
                   189326807620490394##
                   Configs.$trModule
                   Configs.$tcEnvironment1) -}
19eb2b202c58e9b0b33cec42194fc5b5
  $tcEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Environment"#) -}
1312b05c95d0da4bbd4f46fcbed61339
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Configs.$trModule2
                   Configs.$trModule1) -}
63c6fd626df0bb6e3752345d91472070
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Configs"#) -}
41ac88d0b6b50d153bb42a18d5fd4c51
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "servant-persistent-0.1.0.0-F9U6X9AVPnS7puEgXNTfgZ"#) -}
71c54ebb43167e104191bc92ed943e30
  $w$cshowsPrec ::
    Configs.Environment -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Configs.Environment) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Configs.Development
                   -> GHC.Base.++ @ GHC.Types.Char Configs.$fReadEnvironment15 w1
                   Configs.Test
                   -> GHC.Base.++ @ GHC.Types.Char Configs.$fReadEnvironment12 w1
                   Configs.Production
                   -> GHC.Base.++ @ GHC.Types.Char Configs.$fReadEnvironment9 w1 }) -}
b6bf0932d567b333a23ba7f457399723
  $wconnStr ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Configs.connStr2 of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                 case Configs.connStr1 of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                 case ww3 of ds {
                   DEFAULT
                   -> case ww13 of ds1 {
                        DEFAULT
                        -> case GHC.Magic.runRW#
                                  @ 'GHC.Types.PtrRepLifted
                                  @ Data.ByteString.Internal.ByteString
                                  (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   let {
                                     l :: GHC.Prim.Int# = GHC.Prim.+# ds ds1
                                   } in
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# l 0#) of wild1 {
                                     GHC.Types.False
                                     -> case GHC.Prim.newPinnedByteArray#
                                               @ GHC.Prim.RealWorld
                                               l
                                               eta of ds2 { (#,#) ipv ipv1 ->
                                        let {
                                          ipv2 :: GHC.Prim.Addr#
                                          = GHC.Prim.byteArrayContents#
                                              ipv1
                                                `cast`
                                              (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                            GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                                        } in
                                        case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 memcpy GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Addr# #)}
                                               ipv2
                                               (GHC.Prim.plusAddr# ww ww2)
                                               (GHC.Prim.int2Word# ds)
                                               ipv of wild { (#,#) ds3 ds4 ->
                                        case GHC.Prim.touch#
                                               @ 'GHC.Types.PtrRepLifted
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               ww1
                                               ds3 of s' { DEFAULT ->
                                        case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 memcpy GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Addr# #)}
                                               (GHC.Prim.plusAddr# ipv2 ds)
                                               (GHC.Prim.plusAddr# ww10 ww12)
                                               (GHC.Prim.int2Word# ds1)
                                               s' of wild2 { (#,#) ds5 ds6 ->
                                        case GHC.Prim.touch#
                                               @ 'GHC.Types.PtrRepLifted
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               ww11
                                               ds5 of s'1 { DEFAULT ->
                                        let {
                                          ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                                          = GHC.ForeignPtr.PlainPtr ipv1
                                        } in
                                        case GHC.Prim.touch#
                                               @ 'GHC.Types.PtrRepLifted
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               ipv3
                                               s'1 of s'2 { DEFAULT ->
                                        (# s'2,
                                           Data.ByteString.Internal.PS ipv2 ipv3 0# l #) } } } } } }
                                     GHC.Types.True
                                     -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.ByteString.Internal.ByteString #)
                                        of {} }) of ds2 { (#,#) ipv ipv1 ->
                           case ipv1 of ww14 { Data.ByteString.Internal.PS ww15 ww16 ww17 ww18 ->
                           Data.ByteString.Internal.$w$c<>
                             ww5
                             ww6
                             ww7
                             ww8
                             ww15
                             ww16
                             ww17
                             ww18 } }
                        0#
                        -> Data.ByteString.Internal.$w$c<> ww5 ww6 ww7 ww8 ww ww1 ww2 ds }
                   0#
                   -> Data.ByteString.Internal.$w$c<>
                        ww5
                        ww6
                        ww7
                        ww8
                        ww10
                        ww11
                        ww12
                        ww13 } } }) -}
15546665de60f1b111f7b413eea4cd53
  type role App nominal
  newtype App a
    = App {runApp :: Control.Monad.Trans.Reader.ReaderT
                       Configs.Config Servant.Server.Internal.Handler.Handler a}
96249f2ad1bf7f8ea5fb7b5c3cbdf2c5
  data Config
    = Config {getPool :: Database.Persist.Sql.Types.ConnectionPool,
              getEnv :: Configs.Environment,
              getPort :: GHC.Types.Int}
71c54ebb43167e104191bc92ed943e30
  data Environment = Development | Test | Production
36dd97b1afdbdfe70a82c9c86f0326b4
  connStr ::
    Data.ByteString.Internal.ByteString
    -> Database.Persist.Postgresql.ConnectionString
  {- Arity: 1, Strictness: <S(LLLS),1*U(U,U,U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Configs.$wconnStr ww1 ww2 ww3 ww4 }) -}
928738aee5b87831e5e7c7aac05441f1
  connStr1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = " user=postgres password=1234 port=5432"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
723c42200ee1a311e74959b20b95b838
  connStr2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "host=localhost dbname=perservant"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
f155d3088e612ec4ca63235d57559835
  envPool :: Configs.Environment -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Configs.Environment) ->
                 case ds of wild {
                   DEFAULT -> Configs.envPool2
                   Configs.Production -> Configs.envPool1 }) -}
7de426790227c1bd9cc09e420c4ba995
  envPool1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
130ed497370294cda5a4cbb151b9c349
  envPool2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
dd257f88379c69cf6eee65af5b998e9f
  getEnv :: Configs.Config -> Configs.Environment
  RecSel Left Configs.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Configs.Config) ->
                 case ds of wild { Configs.Config ds1 ds2 ds3 -> ds2 }) -}
cfe2360811cea28f6091eb1b16dc4922
  getPool ::
    Configs.Config -> Database.Persist.Sql.Types.ConnectionPool
  RecSel Left Configs.Config
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U,U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Configs.Config) ->
                 case ds of wild { Configs.Config ds1 ds2 ds3 -> ds1 }) -}
7ed5f4e31ba259ca561d2662dff6c0e5
  getPort :: Configs.Config -> GHC.Types.Int
  RecSel Left Configs.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Configs.Config) ->
                 case ds of wild { Configs.Config ds1 ds2 ds3 -> ds3 }) -}
f26c9d77d8a6546cb4569b200184e180
  makePool ::
    Configs.Environment
    -> GHC.Types.IO Database.Persist.Sql.Types.ConnectionPool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Configs.makePool1
                  `cast`
                (<Configs.Environment>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Database.Persist.Sql.Types.ConnectionPool>_R)) -}
cf888b9982f8d2a110cdc051609c609b
  makePool1 ::
    Configs.Environment
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.Persist.Sql.Types.ConnectionPool #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
7deffaba7e31f5aae15d1253e0effe71
  runApp ::
    Configs.App a
    -> Control.Monad.Trans.Reader.ReaderT
         Configs.Config Servant.Server.Internal.Handler.Handler a
  RecSel Left Configs.App
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Configs.runApp1
                  `cast`
                (forall (a :: <*>_N).
                 <Configs.App a>_R ->_R Configs.N:App[0] <a>_N) -}
a5b0636035ae624b5cb30ca9b43dd93c
  runApp1 :: Configs.App a -> Configs.App a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Configs.App a) -> ds) -}
beb8680ec46cf116acda5a2a403e231b
  setLogger :: Configs.Environment -> Network.Wai.Middleware
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Configs.Environment) ->
                 case ds of wild {
                   Configs.Development
                   -> Network.Wai.Middleware.RequestLogger.logStdoutDev
                   Configs.Test -> GHC.Base.id @ Network.Wai.Application
                   Configs.Production
                   -> Network.Wai.Middleware.RequestLogger.logStdout }) -}
instance GHC.Base.Applicative [Configs.App]
  = Configs.$fApplicativeApp
instance GHC.Classes.Eq [Configs.Environment]
  = Configs.$fEqEnvironment
instance GHC.Base.Functor [Configs.App] = Configs.$fFunctorApp
instance GHC.Base.Monad [Configs.App] = Configs.$fMonadApp
instance Control.Monad.Error.Class.MonadError [Servant.Server.Internal.ServantErr.ServantErr,
                                               Configs.App]
  = Configs.$fMonadErrorApp
instance Control.Monad.IO.Class.MonadIO [Configs.App]
  = Configs.$fMonadIOApp
instance Control.Monad.Reader.Class.MonadReader [Configs.Config,
                                                 Configs.App]
  = Configs.$fMonadReaderApp
instance GHC.Read.Read [Configs.Environment]
  = Configs.$fReadEnvironment
instance GHC.Show.Show [Configs.Environment]
  = Configs.$fShowEnvironment
"SPEC/Configs $fApplicativeMaybeT @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                      GHC.Types.IO)
                                                        ($dFunctor :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fApplicativeMaybeT @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Configs.$s$fApplicativeMaybeT
"SPEC/Configs $fApplicativeMaybeT_$c<*> @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO)
                                                              ($dFunctor :: GHC.Base.Functor
                                                                              GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c<*> @ GHC.Types.IO
                                                      $dFunctor
                                                      $dMonad
  = Configs.$s$fApplicativeMaybeT_$s$fApplicativeMaybeT_$c<*>
"SPEC/Configs $fApplicativeNoLoggingT @ (MaybeT IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                         (Control.Monad.Trans.Maybe.MaybeT
                                                                                            GHC.Types.IO))
  Control.Monad.Logger.$fApplicativeNoLoggingT @ (Control.Monad.Trans.Maybe.MaybeT
                                                    GHC.Types.IO)
                                               $dApplicative
  = Configs.$s$fApplicativeNoLoggingT1
"SPEC/Configs $fApplicativeNoLoggingT @ IO" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT @ GHC.Types.IO
                                               $dApplicative
  = Configs.$s$fApplicativeNoLoggingT
"SPEC/Configs $fApplicativeNoLoggingT_$cp1Applicative @ (MaybeT IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                         (Control.Monad.Trans.Maybe.MaybeT
                                                                                                            GHC.Types.IO))
  Control.Monad.Logger.$fApplicativeNoLoggingT_$cp1Applicative @ (Control.Monad.Trans.Maybe.MaybeT
                                                                    GHC.Types.IO)
                                                               $dApplicative
  = Configs.$s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative1
"SPEC/Configs $fApplicativeNoLoggingT_$cp1Applicative @ IO" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT_$cp1Applicative @ GHC.Types.IO
                                                               $dApplicative
  = Configs.$s$fApplicativeNoLoggingT_$s$fApplicativeNoLoggingT_$cp1Applicative
"SPEC/Configs $fApplicativeReaderT_$c<*> @ Handler _" [ALWAYS] forall @ r
                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                          Servant.Server.Internal.Handler.Handler)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ Servant.Server.Internal.Handler.Handler
                                                        @ r
                                                        $dApplicative
  = Configs.$fApplicativeApp_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Configs $fFunctorNoLoggingT @ (MaybeT IO)" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                                 (Control.Monad.Trans.Maybe.MaybeT
                                                                                    GHC.Types.IO))
  Control.Monad.Logger.$fFunctorNoLoggingT @ (Control.Monad.Trans.Maybe.MaybeT
                                                GHC.Types.IO)
                                           $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1
"SPEC/Configs $fFunctorNoLoggingT @ IO" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                        GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT @ GHC.Types.IO $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
"SPEC/Configs $fFunctorNoLoggingT_$c<$ @ (MaybeT IO)" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                                      (Control.Monad.Trans.Maybe.MaybeT
                                                                                         GHC.Types.IO))
  Control.Monad.Logger.$fFunctorNoLoggingT_$c<$ @ (Control.Monad.Trans.Maybe.MaybeT
                                                     GHC.Types.IO)
                                                $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$1
"SPEC/Configs $fFunctorNoLoggingT_$c<$ @ IO" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT_$c<$ @ GHC.Types.IO
                                                $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$c<$
"SPEC/Configs $fFunctorNoLoggingT_$cfmap @ (MaybeT IO)" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                                        (Control.Monad.Trans.Maybe.MaybeT
                                                                                           GHC.Types.IO))
  Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap @ (Control.Monad.Trans.Maybe.MaybeT
                                                       GHC.Types.IO)
                                                  $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap1
"SPEC/Configs $fFunctorNoLoggingT_$cfmap @ IO" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                               GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap @ GHC.Types.IO
                                                  $dFunctor
  = Configs.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT_$cfmap
"SPEC/Configs $fFunctorReaderT_$cfmap @ Handler _" [ALWAYS] forall @ r
                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                   Servant.Server.Internal.Handler.Handler)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ Servant.Server.Internal.Handler.Handler
                                                     @ r
                                                     $dFunctor
  = Configs.$fFunctorApp_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Configs $fMonadBaseControlbMaybeT @ IO @ IO" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                            GHC.Types.IO
                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Control.$fMonadBaseControlbMaybeT @ GHC.Types.IO
                                                        @ GHC.Types.IO
                                                        $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbMaybeT
"SPEC/Configs $fMonadBaseControlbMaybeT_$cliftBaseWith @ IO @ IO" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                           GHC.Types.IO
                                                                                                           GHC.Types.IO)
  Control.Monad.Trans.Control.$fMonadBaseControlbMaybeT_$cliftBaseWith @ GHC.Types.IO
                                                                       @ GHC.Types.IO
                                                                       $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadBaseControlbMaybeT_$cliftBaseWith
"SPEC/Configs $fMonadBaseControlbNoLoggingT @ IO @ (MaybeT IO)" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                         GHC.Types.IO
                                                                                                         (Control.Monad.Trans.Maybe.MaybeT
                                                                                                            GHC.Types.IO))
  Control.Monad.Logger.$fMonadBaseControlbNoLoggingT @ GHC.Types.IO
                                                     @ (Control.Monad.Trans.Maybe.MaybeT
                                                          GHC.Types.IO)
                                                     $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbNoLoggingT1
"SPEC/Configs $fMonadBaseControlbNoLoggingT @ IO @ IO" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                GHC.Types.IO
                                                                                                GHC.Types.IO)
  Control.Monad.Logger.$fMonadBaseControlbNoLoggingT @ GHC.Types.IO
                                                     @ GHC.Types.IO
                                                     $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbNoLoggingT
"SPEC/Configs $fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl @ IO @ (MaybeT
                                                                          IO)" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                                                                                                                        GHC.Types.IO
                                                                                                                                                                                                        (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                                                           GHC.Types.IO))
  Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl @ GHC.Types.IO
                                                                          @ (Control.Monad.Trans.Maybe.MaybeT
                                                                               GHC.Types.IO)
                                                                          $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl1
"SPEC/Configs $fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl @ IO @ IO" [ALWAYS] forall ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                                     GHC.Types.IO
                                                                                                                     GHC.Types.IO)
  Control.Monad.Logger.$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl @ GHC.Types.IO
                                                                          @ GHC.Types.IO
                                                                          $dMonadBaseControl
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBaseControlbNoLoggingT_$cp1MonadBaseControl
"SPEC/Configs $fMonadBasebMaybeT @ IO @ IO" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                              GHC.Types.IO
                                                                              GHC.Types.IO)
  Control.Monad.Base.$fMonadBasebMaybeT @ GHC.Types.IO
                                        @ GHC.Types.IO
                                        $dMonadBase
  = Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadBasebMaybeT
"SPEC/Configs $fMonadBasebNoLoggingT @ IO @ (MaybeT IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                           GHC.Types.IO
                                                                                           (Control.Monad.Trans.Maybe.MaybeT
                                                                                              GHC.Types.IO))
  Control.Monad.Logger.$fMonadBasebNoLoggingT @ GHC.Types.IO
                                              @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                                              $dMonadBase
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT1
"SPEC/Configs $fMonadBasebNoLoggingT @ IO @ IO" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.IO)
  Control.Monad.Logger.$fMonadBasebNoLoggingT @ GHC.Types.IO
                                              @ GHC.Types.IO
                                              $dMonadBase
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT
"SPEC/Configs $fMonadBasebNoLoggingT_$cp2MonadBase @ IO @ (MaybeT
                                                            IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                     GHC.Types.IO
                                                                                                                                                                     (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Logger.$fMonadBasebNoLoggingT_$cp2MonadBase @ GHC.Types.IO
                                                            @ (Control.Monad.Trans.Maybe.MaybeT
                                                                 GHC.Types.IO)
                                                            $dMonadBase
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp2MonadBase
"SPEC/Configs $fMonadBasebNoLoggingT_$cp4MonadBase @ IO @ (MaybeT
                                                            IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                     GHC.Types.IO
                                                                                                                                                                     (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Logger.$fMonadBasebNoLoggingT_$cp4MonadBase @ GHC.Types.IO
                                                            @ (Control.Monad.Trans.Maybe.MaybeT
                                                                 GHC.Types.IO)
                                                            $dMonadBase
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadBasebNoLoggingT_$cp4MonadBase
"SPEC/Configs $fMonadIONoLoggingT_$cp1MonadIO @ IO" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                    GHC.Types.IO)
  Control.Monad.Logger.$fMonadIONoLoggingT_$cp1MonadIO @ GHC.Types.IO
                                                       $dMonadIO
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadIONoLoggingT_$cp1MonadIO
"SPEC/Configs $fMonadLoggerNoLoggingT @ (MaybeT IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                                   (Control.Monad.Trans.Maybe.MaybeT
                                                                                      GHC.Types.IO))
  Control.Monad.Logger.$fMonadLoggerNoLoggingT @ (Control.Monad.Trans.Maybe.MaybeT
                                                    GHC.Types.IO)
                                               $dMonad
  = Configs.$s$fMonadLoggerNoLoggingT
"SPEC/Configs $fMonadLoggerNoLoggingT @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                          GHC.Types.IO)
  Control.Monad.Logger.$fMonadLoggerNoLoggingT @ GHC.Types.IO $dMonad
  = Configs.$s$fMonadLoggerNoLoggingT1
"SPEC/Configs $fMonadMaybeT @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fMonadMaybeT @ GHC.Types.IO $dMonad
  = Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT
"SPEC/Configs $fMonadMaybeT_$c>> @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                     GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fMonadMaybeT_$c>> @ GHC.Types.IO $dMonad
  = Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>>
"SPEC/Configs $fMonadMaybeT_$c>>= @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                      GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fMonadMaybeT_$c>>= @ GHC.Types.IO
                                                $dMonad
  = Configs.$s$fMonadBaseControlbMaybeT_$s$fMonadMaybeT_$c>>=
"SPEC/Configs $fMonadMaybeT_$cp1Monad @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                          GHC.Types.IO)
  Control.Monad.Trans.Maybe.$fMonadMaybeT_$cp1Monad @ GHC.Types.IO
                                                    $dMonad
  = Configs.$s$fApplicativeNoLoggingT_$s$fMonadMaybeT_$cp1Monad
"SPEC/Configs $fMonadNoLoggingT @ (MaybeT IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                             (Control.Monad.Trans.Maybe.MaybeT
                                                                                GHC.Types.IO))
  Control.Monad.Logger.$fMonadNoLoggingT @ (Control.Monad.Trans.Maybe.MaybeT
                                              GHC.Types.IO)
                                         $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT1
"SPEC/Configs $fMonadNoLoggingT @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                    GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT @ GHC.Types.IO $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT
"SPEC/Configs $fMonadNoLoggingT_$c>> @ (MaybeT IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Trans.Maybe.MaybeT
                                                                                     GHC.Types.IO))
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ (Control.Monad.Trans.Maybe.MaybeT
                                                   GHC.Types.IO)
                                              $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>>1
"SPEC/Configs $fMonadNoLoggingT_$c>> @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                         GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ GHC.Types.IO $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$c>>
"SPEC/Configs $fMonadNoLoggingT_$cfail @ (MaybeT IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                                    (Control.Monad.Trans.Maybe.MaybeT
                                                                                       GHC.Types.IO))
  Control.Monad.Logger.$fMonadNoLoggingT_$cfail @ (Control.Monad.Trans.Maybe.MaybeT
                                                     GHC.Types.IO)
                                                $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail1
"SPEC/Configs $fMonadNoLoggingT_$cfail @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                           GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$cfail @ GHC.Types.IO
                                                $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cfail
"SPEC/Configs $fMonadNoLoggingT_$cp1Monad @ IO" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                              GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$cp1Monad @ GHC.Types.IO
                                                   $dMonad
  = Configs.$s$fMonadBaseControlbNoLoggingT_$s$fMonadNoLoggingT_$cp1Monad
"SPEC/Configs $fMonadReaderT_$c>> @ Handler _" [ALWAYS] forall @ r
                                                               ($dMonad :: GHC.Base.Monad
                                                                             Servant.Server.Internal.Handler.Handler)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ Servant.Server.Internal.Handler.Handler
                                                 @ r
                                                 $dMonad
  = Configs.$fMonadApp_$s$fMonadReaderT_$c>> @ r
"SPEC/Configs $fMonadReaderT_$c>>= @ Handler _" [ALWAYS] forall @ r
                                                                ($dMonad :: GHC.Base.Monad
                                                                              Servant.Server.Internal.Handler.Handler)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ Servant.Server.Internal.Handler.Handler
                                                  @ r
                                                  $dMonad
  = Configs.$fMonadApp_$s$fMonadReaderT_$c>>= @ r
"SPEC/Configs $fMonadReaderT_$cfail @ Handler _" [ALWAYS] forall @ r
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               Servant.Server.Internal.Handler.Handler)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ Servant.Server.Internal.Handler.Handler
                                                   @ r
                                                   $dMonad
  = Configs.$fMonadApp_$s$fMonadReaderT_$cfail @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

